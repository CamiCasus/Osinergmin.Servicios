// <auto-generated />
using Infraestructura.Data.MainModule;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace Infraestructura.Data.MainModule.Migrations
{
    [DbContext(typeof(MainModuleContext))]
    [Migration("20180209221636_AgregarTablaInformesEnsayos")]
    partial class AgregarTablaInformesEnsayos
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.MainModule.Entities.DetalleGuiaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CantidadMuestras");

                    b.Property<string>("CodigoEstablecimiento");

                    b.Property<string>("Ensayos");

                    b.Property<DateTime>("FechaMuestreo");

                    b.Property<string>("FotoMuestra");

                    b.Property<int>("GuiaId");

                    b.Property<string>("NombreArchivo");

                    b.Property<string>("NumeroActa");

                    b.Property<int>("NumeroMuestra");

                    b.Property<string>("NumeroPrescintoDirimencia");

                    b.Property<string>("NumeroPrescintoLaboratorio");

                    b.Property<string>("Observaciones");

                    b.Property<string>("OrigenProducto");

                    b.Property<int>("ProductoId");

                    b.Property<string>("TipoEnvase");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("GuiaId");

                    b.HasIndex("ProductoId");

                    b.ToTable("DetalleGuia");
                });

            modelBuilder.Entity("Domain.MainModule.Entities.GuiaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Codigo");

                    b.Property<string>("Comentario");

                    b.Property<string>("DniRepresentanteIntertek");

                    b.Property<string>("DniRepresentanteOsinergmin");

                    b.Property<int>("Estado");

                    b.Property<DateTime>("FechaRecepcion");

                    b.Property<string>("GuiaAdjunta");

                    b.Property<string>("NombreArchivo");

                    b.Property<long>("NumeroGuia");

                    b.Property<string>("RepresentanteIntertek");

                    b.Property<string>("RepresentanteOsinergmin");

                    b.Property<string>("SupervisorExtraccionMuestra");

                    b.HasKey("Id");

                    b.ToTable("Guias");
                });

            modelBuilder.Entity("Domain.MainModule.Entities.InformeEnsayoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodigoRecepcion");

                    b.Property<int>("DetalleGuiaId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("DetalleGuiaId")
                        .IsUnique();

                    b.ToTable("InformesEnsayos");

                    b.HasDiscriminator<string>("Discriminator").HasValue("InformeEnsayoEntity");
                });

            modelBuilder.Entity("Domain.MainModule.Entities.ItemTablaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion");

                    b.Property<int>("Estado");

                    b.Property<string>("Nombre");

                    b.Property<int>("TablaId");

                    b.Property<string>("Valor");

                    b.HasKey("Id");

                    b.HasIndex("TablaId");

                    b.ToTable("ItemsTabla");
                });

            modelBuilder.Entity("Domain.MainModule.Entities.ProductoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Codigo");

                    b.Property<string>("Nombre");

                    b.Property<int>("TipoProducto");

                    b.HasKey("Id");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("Domain.MainModule.Entities.TablaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion");

                    b.Property<int>("Estado");

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Tablas");
                });

            modelBuilder.Entity("Domain.MainModule.Entities.UsuarioEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Estado");

                    b.Property<string>("Password");

                    b.Property<string>("Usuario");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Domain.MainModule.Entities.InformeEnsayoGlpEntity", b =>
                {
                    b.HasBaseType("Domain.MainModule.Entities.InformeEnsayoEntity");

                    b.Property<string>("ButadienoMol");

                    b.Property<string>("ButenoMol");

                    b.Property<float?>("Cis2butenoMol");

                    b.Property<string>("CorrosionLaminaCobre");

                    b.Property<float?>("DensidadRelativa");

                    b.Property<float?>("DeterminacionEtilMercaptano");

                    b.Property<string>("EtanoMol");

                    b.Property<string>("EtilenoMol");

                    b.Property<string>("Hexano");

                    b.Property<float?>("IsobutanoMol");

                    b.Property<string>("IsobutilenoMol");

                    b.Property<float?>("IsopentanoMol");

                    b.Property<string>("MetanoMol");

                    b.Property<float?>("NbutanoMol");

                    b.Property<string>("NpentanoMol");

                    b.Property<string>("NumeroInformeLaboratorio");

                    b.Property<string>("NumeroOctanoMotor");

                    b.Property<string>("Observaciones");

                    b.Property<float?>("PresionVapor");

                    b.Property<float?>("PropanoMol");

                    b.Property<string>("PropilenoMol");

                    b.Property<string>("Trans2butenoMol");

                    b.ToTable("InformeEnsayoGlpEntity");

                    b.HasDiscriminator().HasValue("InformeEnsayoGlpEntity");
                });

            modelBuilder.Entity("Domain.MainModule.Entities.InformeEnsayoLiquidoEntity", b =>
                {
                    b.HasBaseType("Domain.MainModule.Entities.InformeEnsayoEntity");

                    b.Property<float?>("Aastmd86_perdidas");

                    b.Property<float?>("Aastmd86_residuo");

                    b.Property<string>("AguaPorDestilacion");

                    b.Property<string>("AguaSedimentos");

                    b.Property<float?>("Astmd86_10p");

                    b.Property<float?>("Astmd86_20p");

                    b.Property<float?>("Astmd86_50p");

                    b.Property<float?>("Astmd86_5p");

                    b.Property<float?>("Astmd86_90p");

                    b.Property<float?>("Astmd86_95p");

                    b.Property<float?>("Astmd86_pfe");

                    b.Property<float?>("Astmd86_pie");

                    b.Property<float?>("Astmd86_recup");

                    b.Property<string>("Color");

                    b.Property<string>("ContaminacionParticulas");

                    b.Property<string>("ContenidoAzufre4294");

                    b.Property<string>("ContenidoAzufre5453");

                    b.Property<string>("ContenidoDipeMasa");

                    b.Property<string>("ContenidoDipeVolumen");

                    b.Property<string>("ContenidoEtanolMasa");

                    b.Property<string>("ContenidoEtanolVolumen");

                    b.Property<string>("ContenidoEtbeMasa");

                    b.Property<string>("ContenidoEtbeVolumen");

                    b.Property<float?>("ContenidoFameVolumen");

                    b.Property<string>("ContenidoGomas");

                    b.Property<float?>("ContenidoManganeso");

                    b.Property<string>("ContenidoMetanolMasa");

                    b.Property<string>("ContenidoMetanolVolumen");

                    b.Property<string>("ContenidoMtbeMasa");

                    b.Property<string>("ContenidoMtbeVolumen");

                    b.Property<string>("ContenidoPlomo");

                    b.Property<string>("ContenidoPlomoAstmd3237");

                    b.Property<string>("ContenidoPlomoAstmd3341");

                    b.Property<string>("ContenidoSolidos");

                    b.Property<string>("ContenidoTameMasa");

                    b.Property<string>("ContenidoTameVolumen");

                    b.Property<string>("ContenidoTertbutanoMasa");

                    b.Property<string>("ContenidoTertbutanoVolumen");

                    b.Property<float?>("DensidadRelativa")
                        .HasColumnName("InformeEnsayoLiquidoEntity_DensidadRelativa");

                    b.Property<float?>("DeterminacionBenceno");

                    b.Property<float?>("GravidadApi");

                    b.Property<float?>("IndiceCetano");

                    b.Property<float?>("IndiceCetanoBajoAzufre");

                    b.Property<string>("IndiceCetanoFme");

                    b.Property<float?>("IndiceCetanoProcedenciaA");

                    b.Property<float?>("IndiceCetanoProcedenciaB");

                    b.Property<string>("NumeroInformeLaboratorio")
                        .HasColumnName("InformeEnsayoLiquidoEntity_NumeroInformeLaboratorio");

                    b.Property<string>("Observaciones")
                        .HasColumnName("InformeEnsayoLiquidoEntity_Observaciones");

                    b.Property<string>("Octanaje");

                    b.Property<float?>("PresionVaporReid");

                    b.Property<string>("PuntoCongelamiento");

                    b.Property<string>("PuntoEscurrimiento");

                    b.Property<string>("PuntoInflamacion");

                    b.Property<float?>("ReaccionAlAgua");

                    b.Property<string>("RemanenteRetirado");

                    b.Property<string>("ResultadoFinal");

                    b.Property<string>("TotalOxigenadosMasa");

                    b.Property<string>("TotalOxigenadosVolumen");

                    b.Property<string>("TotalOxigeno");

                    b.Property<float?>("ViscosidadCinematica");

                    b.ToTable("InformeEnsayoLiquidoEntity");

                    b.HasDiscriminator().HasValue("InformeEnsayoLiquidoEntity");
                });

            modelBuilder.Entity("Domain.MainModule.Entities.DetalleGuiaEntity", b =>
                {
                    b.HasOne("Domain.MainModule.Entities.GuiaEntity", "Guia")
                        .WithMany("Detalles")
                        .HasForeignKey("GuiaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.MainModule.Entities.ProductoEntity", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.MainModule.Entities.InformeEnsayoEntity", b =>
                {
                    b.HasOne("Domain.MainModule.Entities.DetalleGuiaEntity", "DetalleGuia")
                        .WithOne("InformeEnsayo")
                        .HasForeignKey("Domain.MainModule.Entities.InformeEnsayoEntity", "DetalleGuiaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.MainModule.Entities.ItemTablaEntity", b =>
                {
                    b.HasOne("Domain.MainModule.Entities.TablaEntity", "Tabla")
                        .WithMany("ItemTabla")
                        .HasForeignKey("TablaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
